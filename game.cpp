#include "mbed.h"
#include "game.h"
#include "Adafruit_SSD1306.h"

#define SEAL_WIDTH 8
#define SEAL_HEIGHT 6
#define PENGUIN_WIDTH 20
#define PENGUIN_HEIGHT 20
#define GROUND_WIDTH 128
#define GROUND_HEIGHT 64

#define INITIAL_HOLE_WIDTH 10
#define HOLE_WIDTH_DX 2
#define INITIAL_HOLE_Y 0
#define HOLE_DY 4
#define HOLE_HEIGHT 3
#define SEAL_SHOW_Y 22

#define INITIAL_PENGUIN_X 52
#define INITIAL_PENGUIN_Y 42
#define PENGUIN_JUMP_Y 37
#define JUMP_US 700000
#define PENGUIN_VEL_X 3
#define PENGUIN_RIGHTEND 81
#define PENGUIN_LEFTEND 27

// Hole 클래스 정의
const int Hole::hole_arr[3][3] = {{47, -2, 1}, {59, -1, 2}, {71, 1, 1}}; // 구멍 초기 위치 배열 {x, dx, dc}

Hole::Hole(int hole_idx) {
    count = 0; rect_y = INITIAL_HOLE_Y; rect_w = INITIAL_HOLE_WIDTH; onoff = false; seal = false;
    rect_x = hole_arr[hole_idx][0]; rect_dx = hole_arr[hole_idx][1]; dcount = hole_arr[hole_idx][2];
    srand(time(NULL));
}

// 구멍 초기화
void Hole::set(int hole_idx) {
    int x = hole_arr[hole_idx][0];
    int w = INITIAL_HOLE_WIDTH;
    if (rand()%4 < 1) { seal = true; } //0.25 확률로 물개가 있는 구멍(뛰어넘지 못함) 생성
    else if ((hole_idx == 0 || hole_idx == 1) && rand()%4 < 1) { w *= 2; } //0.25 확률로 긴 구멍 생성
    rect_x = x; rect_dx = hole_arr[hole_idx][1]; dcount = hole_arr[hole_idx][2]; rect_y = INITIAL_HOLE_Y; rect_w = w;
    onoff = true; // 구멍 활성화
}

// 구멍 비활성화
void Hole::off() {
    rect_x = hole_arr[0][0]; rect_dx = hole_arr[0][1]; dcount = hole_arr[0][2]; rect_y = INITIAL_HOLE_Y; rect_w = INITIAL_HOLE_WIDTH;
    onoff = false; seal = false;
    count = 0;
}

// 구멍 그리기
void Hole::rect(Adafruit_SSD1306_I2c& oled) {
    if (!onoff) { return; }                          // hole 비활성화 상태면 리턴
    oled.fillRect(rect_x, rect_y, rect_w, HOLE_HEIGHT, BLACK); // 구멍 그리기
    
    if (seal && rect_y >= SEAL_SHOW_Y) {             // 물개가 있는 구멍이고, 구멍이 중간쯤 내려오면 물개 그리기
        oled.fillRect(rect_x + rect_w/2 - SEAL_WIDTH/2, rect_y - SEAL_HEIGHT, SEAL_WIDTH, SEAL_HEIGHT, BLACK);
        oled.drawBitmap(rect_x + rect_w/2 - SEAL_WIDTH/2, rect_y - SEAL_HEIGHT, seal_img, SEAL_WIDTH, SEAL_HEIGHT, WHITE);
    }
    oled.fillRect(rect_x, rect_y, rect_w, HOLE_HEIGHT, BLACK); // 구멍 그리기
    if (count % 2 == 0) { rect_w += HOLE_WIDTH_DX; }             // 구멍 너비 늘리기
    if (count % dcount == 0) { rect_x += rect_dx; }  //구멍 x위치 조절
    count++;
    rect_y += HOLE_DY;
    
    if (rect_y >= GROUND_HEIGHT) { // 끝까지 내려오면 초기화
        off();
    }
}

// Penguin 클래스 정의
Penguin::Penguin(PinName jump_pin) : btn(jump_pin, PullUp) {
    penguin_x = INITIAL_PENGUIN_X; penguin_y = INITIAL_PENGUIN_Y;
    _jump = false; game_over = false; game_over_flag = false; game_start_flag = false;
    btn.fall(callback(this, &Penguin::jump));
}

// 스위치 인터럽트 콜백 함수
void Penguin::jump(){
    if (!game_over) { // 게임 오버 상태가 아니면 점프
        if(!_jump){   // 점프 상태가 아니면 점프
            penguin_y = PENGUIN_JUMP_Y;
            _jump = true;
            tmo.attach_us(callback(this,&Penguin::down), JUMP_US); //0.7초 점프
        }
    } else { // 게임 오버 상태면 게임 재시작
        game_over = false;
        game_start_flag = true;
    }
}

// 점프 타임아웃 콜백 함수
void Penguin::down() {
    _jump = false;
    penguin_y = INITIAL_PENGUIN_Y;
    tmo.detach();
}

// 오른쪽 이동
void Penguin::move_right() {
    penguin_x += PENGUIN_VEL_X;
    if (penguin_x > PENGUIN_RIGHTEND) { // 오른쪽 이동 상한
        penguin_x = PENGUIN_RIGHTEND;
    }
}

// 왼쪽 이동
void Penguin::move_left() {
    penguin_x -= PENGUIN_VEL_X;
    if (penguin_x < PENGUIN_LEFTEND) { //왼쪽 이동 하한
        penguin_x = PENGUIN_LEFTEND;
    }
}

// 게임 오버 판정
void Penguin::decision(Hole& hole1, Hole& hole2, Hole& hole3) {
    if (hole1.get_y() >= 59 && hole1.get_y() <= 61 && penguin_x + 13 >= hole1.get_x() && penguin_x + 6 <= hole1.get_x() + hole1.get_w()) {
        if (!_jump || hole1.get_seal()) {
            game_over = true;
            game_over_flag = true;
        }
    } else if (hole2.get_y() >= 59 && hole2.get_y() <= 61 && penguin_x + 13 >= hole2.get_x() && penguin_x + 6 <= hole2.get_x() + hole2.get_w()) {
        if (!_jump || hole2.get_seal()) {
            game_over = true;
            game_over_flag = true;
        }
    } else if (hole3.get_y() >= 59 && hole3.get_y() <= 61 && penguin_x + 13 >= hole3.get_x() && penguin_x + 6 <= hole3.get_x() + hole3.get_w()) {
        if (!_jump || hole3.get_seal()) {
            game_over = true;
            game_over_flag = true;
        }
    }
}

// 펭귄 그리기
void Penguin::draw_penguin(Adafruit_SSD1306_I2c& oled) {
    oled.fillRect(penguin_x, penguin_y, PENGUIN_WIDTH, PENGUIN_HEIGHT, BLACK);
    oled.drawBitmap(penguin_x, penguin_y, penguin_img, PENGUIN_WIDTH, PENGUIN_HEIGHT, WHITE);
}

//이미지 배열
// 물개 이미지 (8x6)
const uint8_t seal_img[] = {
    0x03, 0x39, 0x34, 0x3e, 0x3e, 0x34, 0x39, 0x03
};

// 펭귄 이미지 (20x20)
const uint8_t penguin_img[] = {
    0xff, 0xff, 0xff, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x09, 0x33, 
    0x07, 0xff, 0xff, 0xff, 0xf3, 0xf1, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf1, 0xf3, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x00, 0x00, 
    0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
};

// 땅 이미지 (128x64)
const uint8_t ground[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 
    0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 
    0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
